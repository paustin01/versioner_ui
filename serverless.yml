# Happy Coding!
service: clear-lake-versionator
frameworkVersion: '2'

custom:
  stage: ${opt:stage, 'development'}
  vars: ${file(./config/${self:custom.stage}.yml)}
  s3Sync:
    - bucketName: ${file(./config/${self:custom.stage}.yml):app_bucket}
      localDir: dist/
  cloudfrontInvalidate:
    - distributionIdKey: 'CDNDistributionId' #reference to stack output
      items:
        - '/index.html'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: ${self:custom.vars.region}
  deploymentBucket:
    name: ${self:custom.vars.deploy_bucket}

plugins:
  - serverless-single-page-app-plugin
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

resources:
  Resources:
    # CloudFront Distro Config
    S3AppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: Private
        VersioningConfiguration:
          Status: Enabled
        BucketName: '${self:custom.vars.app_bucket}'
        LoggingConfiguration:
          DestinationBucketName: !Ref S3AppLogBucket
          LogFilePrefix: '${self:custom.vars.app_name}'
        Tags:
          - Key: 'billing-env'
            Value: '${self:custom.vars.env}'
          - Key: 'billing-product'
            Value: '${self:custom.vars.app_name}'
          - Key: 'billing-type'
            Value: 'data'
    #Log Bucket
    S3AppLogBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        AccessControl: LogDeliveryWrite
        VersioningConfiguration:
          Status: Suspended
        BucketName: '${self:custom.vars.app_log_bucket}'
        LifecycleConfiguration:
          Rules:
            - Id: DeleteContentAfter90Days
              Status: 'Enabled'
              ExpirationInDays: 90
        Tags:
          - Key: 'billing-env'
            Value: '${self:custom.vars.env}'
          - Key: 'billing-product'
            Value: 'devops'
          - Key: 'billing-type'
            Value: 'devops'
    # App Bucket Access
    S3AppBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: !Ref S3AppBucket
        PolicyDocument:
          Statement:
            - Action: 's3:GetObject'
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::${S3AppBucket}/*'
              Principal:
                AWS: !Sub >-
                  arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                  ${CloudFrontOriginAccessIdentity}
    # App Access ID
    CloudFrontOriginAccessIdentity:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: '${self:custom.vars.app_name} static app'
    # CloudFront Distro
    DefaultCloudfrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - '${self:custom.vars.app_domain_alias}'
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: '/index.html'
          DefaultCacheBehavior:
            ForwardedValues:
              QueryString: true
            TargetOriginId: '${self:custom.vars.app_bucket}'
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          Logging:
            Bucket: !Sub '${S3AppLogBucket}.s3.amazonaws.com'
            Prefix: '${self:custom.vars.app_name}-site-access-logs'
          Comment: '${self:custom.vars.app_name} distribution'
          Origins:
            - Id: ${self:custom.vars.app_bucket}
              DomainName: '${self:custom.vars.app_bucket}.s3.amazonaws.com'
              S3OriginConfig:
                OriginAccessIdentity: !Sub >-
                  origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.vars.app_cert}
            SslSupportMethod: 'sni-only'
          WebACLId: ${self:custom.vars.app_acl}
    # Custom DNS record
    CustomDomainRecordSet:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneId: ${self:custom.vars.app_hosted_zone}
        RecordSets:
          - Name: ${self:custom.vars.app_domain_alias}
            Type: A
            AliasTarget:
              DNSName:
                !Join [
                  '',
                  [!GetAtt DefaultCloudfrontDistribution.DomainName, '.'],
                ]
              HostedZoneId: 'Z2FDTNDATAQYW2'

  Outputs:
    DefaultCloudfrontDistributionOutput:
      Value:
        'Fn::GetAtt': [DefaultCloudfrontDistribution, DomainName]
    CDNDistributionId:
      Description: CDN distribution id.
      Value: !Ref DefaultCloudfrontDistribution

